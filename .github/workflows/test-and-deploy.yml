name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test-job:
    name: Test Job
    runs-on: ubuntu-latest
    container:
      image: python:3.10-slim-bullseye

    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis/redis-stack-server:latest
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      ILVO_PATH: tests/files/robot
      # The hostname used to communicate with the Redis service container
      REDIS_HOST: redis
      # The default Redis port
      REDIS_PORT: 6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update -qy
          apt-get install -y redis-tools
          pip install --upgrade pip
          pip install coverage pytest
          pip install -r requirements.txt

      - name: Check Redis connection
        run: |
          echo "Is Redis Working?"
          redis-cli -h $REDIS_HOST -p $REDIS_PORT PING

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          coverage run -m pytest tests/test_*.py

      - name: Coverage report
        run: |
          echo "Coverage unit tests..."
          coverage report

  deploy-job:
    name: Deploy Job
    runs-on: ubuntu-latest
    container:
      image: python:3.10-slim-bullseye

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install build twine
          pip install -r requirements.txt

      - name: Build the package
        run: |
          python -m build

      - name: Deploy to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python prepare-package-registry.py
          python3 -m twine upload --repository-url https://upload.pypi.org/legacy/ dist/*

      - name: Application successfully deployed
        run: echo "Application successfully deployed."
