name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test:
    name: Test Job
    runs-on: ubuntu-latest
    container:
      image: python:3.10-slim-bullseye

    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis/redis-stack-server:latest
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      ILVO_PATH: tests/files/robot
      # The hostname used to communicate with the Redis service container
      REDIS_HOST: redis
      # The default Redis port
      REDIS_PORT: 6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          apt-get update -qy
          apt-get install -y redis-tools
          pip install --upgrade pip
          pip install coverage pytest
          pip install -r requirements.txt

      - name: Check Redis connection
        run: |
          echo "Is Redis Working?"
          redis-cli -h $REDIS_HOST -p $REDIS_PORT PING

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          coverage run -m pytest tests/test_*.py

      - name: Coverage report
        run: |
          echo "Coverage unit tests..."
          coverage report

  build:
    name: Build distribution artof-utils
    runs-on: ubuntu-latest
    needs:
    - test

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/

  stage-testpypi:
    name: >-
      Publish Python artof-utils distribution to TestPyPI
#    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest

    environment:
      name: staging
      url: https://test.pypi.org/p/artof-utils
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution ðŸ“¦ to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/


  deploy-pypi:
    name: >-
      Publish Python artof-utils distribution to PyPI
#    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build
    runs-on: ubuntu-latest

    environment:
      name: production
      url: https://pypi.org/p/artof-utils
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish distribution ðŸ“¦ to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1